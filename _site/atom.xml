<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="//assets/xslt/atom.xslt" ?>
<?xml-stylesheet type="text/css" href="//assets/css/atom.css" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>http://localhost:4000//</id>
	<title>Kimberly Fessel Blog</title>
	<updated>2019-08-09T10:43:27-04:00</updated>

	<subtitle>Kimberly Fessel is a Senior Data Scientist at Metis. Her enthusiasm for data storytelling often leads her toward better math, better visuals, and better science!</subtitle>

	
		
		<author>
			
				<name>Kimberly Fessel</name>
			
			
			
		</author>
	

	<link href="http://localhost:4000//atom.xml" rel="self" type="application/rss+xml" />
	<link href="http://localhost:4000//" rel="alternate" type="text/html" />

	<generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator>

	
		<entry>
			<id>http://localhost:4000//visualizations/matplotlib-updates/</id>
			<title>Simple Ways to Improve Your Matplotlib</title>
			<link href="http://localhost:4000//visualizations/matplotlib-updates/" rel="alternate" type="text/html" title="Simple Ways to Improve Your Matplotlib" />
			<updated>2019-08-05T00:00:00-04:00</updated>

			
				
				<author>
					
						<name>KFessel</name>
					
					
					
				</author>
			
			<summary>&lt;em&gt;Matplotlib's default properties often yield unappealing plots that can be off-putting to many users.  This post offers several simple ways to improve upon these defaults and help spruce up your matplotlib visualizations.&lt;/em&gt;</summary>
			<content type="html" xml:base="http://localhost:4000//visualizations/matplotlib-updates/">&lt;!--more--&gt;

&lt;p&gt;Intro statements - the defaults for matplotlib aren‚Äôt great.  Can move to Seaborn (more on that later) but you can also use special commands to make your matplotlib plots look a lot better.&lt;/p&gt;

&lt;p&gt;I recently gave a talk at ODSC NYC about data visualization‚Ä¶&lt;/p&gt;

&lt;p&gt;Cereal data used for all examples below&lt;/p&gt;

&lt;h2 id=&quot;remove-spines&quot;&gt;Remove Spines&lt;/h2&gt;

&lt;p&gt;The first matplotlib default that we may want to update is the black box that surrounds each plot, so called ‚Äúspines‚Äù in matplotlib.  One way to do this is to &lt;a href=&quot;https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.gca.html&quot;&gt;get the current axis&lt;/a&gt; through pyplot and update the visibility of each spine as desired.&lt;/p&gt;

&lt;p&gt;Let‚Äôs say we want to turn off the top and right spines, for example.  If we have imported matplotlib‚Äôs pyplot submodule with:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;we just need to add the following to our code to improve matplotlib‚Äôs defaults:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'top'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'right'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/spines.png&quot; alt=&quot;Remove matplotlib spines&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;&lt;em&gt;Removing distracting spines can help people focus on your visual.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h2 id=&quot;explore-color-options&quot;&gt;Explore Color Options&lt;/h2&gt;

&lt;p&gt;Matplotlib‚Äôs &lt;a href=&quot;https://matplotlib.org/3.1.1/users/dflt_style_changes.html#colors-color-cycles-and-color-maps&quot;&gt;default colors just got an update&lt;/a&gt; but you can still easily change them to make your plots more attractive or even to reflect your company‚Äôs brand colors.&lt;/p&gt;

&lt;h3 id=&quot;hex-codes&quot;&gt;Hex Codes&lt;/h3&gt;

&lt;p&gt;One of my favorite methods for updating matplotlib‚Äôs colors is to directly pass &lt;a href=&quot;https://htmlcolorcodes.com/&quot;&gt;hex codes&lt;/a&gt; into the color argument because it allows me to be very specific about my color choices.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'#0000CC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3schools.com/colors/colors_picker.asp&quot;&gt;This handy tool&lt;/a&gt; can help you select an appropriate hex color by testing it against white and black text as well as comparing several lighter and darker shades.  Alternatively, you can take a more scientific approach to choosing your palette by checking out &lt;a href=&quot;http://vrl.cs.brown.edu/color&quot;&gt;Colorgorical&lt;/a&gt; by Connor Gramazio out of the Brown Visualization Research Lab.  The Colorgorical tool allows you to build a color palette by balancing various preferences like human perceptual difference and aesthetic pleasure.&lt;/p&gt;

&lt;h3 id=&quot;xkcd-colors&quot;&gt;xkcd Colors&lt;/h3&gt;

&lt;p&gt;Another great way to update matplotlib‚Äôs default colors is to utilize the &lt;a href=&quot;https://xkcd.com/color/rgb/&quot;&gt;xkcd color library&lt;/a&gt;.  These 954 colors were specifically curated and named by the several hundred thousand participants of the &lt;a href=&quot;https://blog.xkcd.com/2010/05/03/color-survey-results/&quot;&gt;xkcd color name survey&lt;/a&gt;.  You can use them in matplotlib by prefixing their names with ‚Äòxkcd:‚Äô.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xkcd:lightish blue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/color.png&quot; alt=&quot;Explore matplotlib colors&quot; width=&quot;900&quot; /&gt;
&lt;p&gt;&lt;em&gt;Matplotlib default colors can easily be updated by passing hex codes or referencing the xkcd library.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h2 id=&quot;layer-visuals&quot;&gt;Layer Visuals&lt;/h2&gt;

&lt;p&gt;Matplotlib allows users to layer multiple graphics on top of each other, which can help when comparing results or setting baselines.  Two useful properties can help control layer opacity (&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;) and ordering (&lt;code class=&quot;highlighter-rouge&quot;&gt;zorder&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;opacity&quot;&gt;Opacity&lt;/h3&gt;

&lt;p&gt;The alpha property in matplotlib controls an object‚Äôs opacity.  This value ranges from zero to one with zero being fully transparent (invisible üëÄ) and one being entirely opaque.  Reducing alpha will make your plot objects see-through, allowing multiple layers to be seen at once, and this may also be useful if you are building a scatter plot with overlapping points.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/alpha.png&quot; alt=&quot;Adjust matplotlib opacity&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;&lt;em&gt;Reducing opacity by decreasing alpha can help visualize points that overlap.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h3 id=&quot;order&quot;&gt;Order&lt;/h3&gt;

&lt;p&gt;Matplotlib‚Äôs zorder property, however, controls how close objects are to the foreground.  Objects with smaller values for zorder are closer to the background, while those larger zorder values appear closer to the front.  For example, if I‚Äôm making a scatter plot with an accompanying line plot, I can bring the line forward by making its zorder larger.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zorder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/zorder.png&quot; alt=&quot;Control layer order with zorder&quot; width=&quot;600&quot; /&gt;
&lt;p&gt;&lt;em&gt; Plot objects can be brought to the foreground or pushed to the background by changing zorder.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h2 id=&quot;annotate-main-points-or-examples&quot;&gt;Annotate Main Points or Examples&lt;/h2&gt;

&lt;p&gt;An extremely powerful way to convey a specific point or add validity to your results is to directly annotate your matplotlib visuals with main points or specific illustrative examples.  To do this, just add annotation code specifying the desired text and position to your matplotlib visual.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When first approaching this cereal dataset, one might assume that ‚Äúrating‚Äù is some kind score indicating cereals that consumers prefer.  In the zorder figure above, however, I built a quick linear regression model which shows that the correlation between calories per cup and ratings is practically non-existent, which makes the theory that ‚Äúrating‚Äù is a consumer preference score unlikely.  This misconception becomes even more obvious once I take a look at the extremes: Cap‚Äôn Crunch has a very low rating while All-Bran with Extra Fiber is rated very highly.  And the cereal with the most calories per cup, Grape Nuts, is likely not meant to be consumed in such large quantities!&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/annotate.png&quot; alt=&quot;Annotate examples&quot; width=&quot;700&quot; /&gt;
&lt;p&gt;&lt;em&gt; Annotating your visuals with a few examples can add legitimacy.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h2 id=&quot;baseline-and-highlight&quot;&gt;Baseline and Highlight&lt;/h2&gt;

&lt;p&gt;Adding a baseline to your visuals helps set expectations, while a shaded region can further emphasize your conclusions.  A simple horizontal line or background shading provides others with appropriate context and can speed along their understanding of your results.&lt;/p&gt;

&lt;h3 id=&quot;horizontal-and-vertical-lines&quot;&gt;Horizontal and Vertical Lines&lt;/h3&gt;

&lt;p&gt;For the examples that follows, let‚Äôs consider the interplay between fat and sugar in our cereal dataset.  Simply plotting this relationship doesn‚Äôt look too interesting at first, but it turns out the median fat per cup for these cereals is just 1 gram because many cereals contain no fat at all.  Adding this baseline helps people understand this fact much quicker.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/baseline.png&quot; alt=&quot;Add a baseline&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;&lt;em&gt; A horizontal or vertical baseline can help set the stage for your data.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;p&gt;In some cases, you may want to completely remove the default x- and y-axes that matplotlib provides and create your own axes based on some aggregate of the data.  This situation just requires removing spines as we did before, removing tick marks, and adding a horizontal and vertical lines.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Remove ticks&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Horizontal and vertical lines&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axhline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#horizontal line&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#vertical line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/new_axes.png&quot; alt=&quot;Add a baseline&quot; width=&quot;600&quot; /&gt;
&lt;p&gt;&lt;em&gt; You can also create new axes for your data by removing spines and ticks and adding custom lines.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h3 id=&quot;rectangle&quot;&gt;Rectangle&lt;/h3&gt;

&lt;p&gt;Once we have plotted the cereals‚Äô fat vs sugars with these new axes, we can now see that there are very few cereals that are low in sugar but high in fat, which makes sense because cereals aren‚Äôt typically savory.  To clearly make this point, we could draw attention to the upper left quadrant by drawing a rectangle around this area.  There are several shapes that you can draw on your matplotlib graphs via the &lt;a href=&quot;https://matplotlib.org/3.1.1/api/patches_api.html#module-matplotlib.patches&quot;&gt;patches module&lt;/a&gt;, including a rectangle or even a &lt;a href=&quot;https://matplotlib.org/3.1.1/gallery/shapes_and_collections/dolphin.html#sphx-glr-gallery-shapes-and-collections-dolphin-py&quot;&gt;dolphin&lt;/a&gt;.  First import code for the rectangle patch.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.patches&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rectangle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you just need to grab your current axes and add a rectangular patch:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where the x- and y-position refer to the lower lefthand corner.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/rectangle.png&quot; alt=&quot;Add a rectangle&quot; width=&quot;600&quot; /&gt;
&lt;p&gt;&lt;em&gt; To draw people toward a particular part of your visual, consider adding a rectangle.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h3 id=&quot;shading&quot;&gt;Shading&lt;/h3&gt;

&lt;p&gt;Instead of using a rectangle, shading provides another option for drawing attention to a particular region on your plot.  There are a few ways to do this.&lt;/p&gt;

&lt;p&gt;Firstly, if you‚Äôd like to highlight an entire horizontal or vertical region, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;axhspan&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;axvspan&lt;/code&gt; by adding the following to your plot code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axhspan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#horizontal shading&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axvspan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#vertical shading&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Previous options like &lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;zorder&lt;/code&gt; also help here because you will likely want to make your shading more transparent and/or move it to the background of your figure.&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/shading.png&quot; alt=&quot;Shading for highlighting&quot; width=&quot;800&quot; /&gt;
&lt;p&gt;&lt;em&gt; Background shading also provides an effective way to highlight a particular region of your plot.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;p&gt;Another way to add shading is to define two lines and fill between them.  This method even takes an optional argument called &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt; which allows you to filter your highlight region.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINE1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINE2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To shade the same region that we drew a rectangle around previously, we can just predefine an array of equally spaced x-values and filter on them as needed.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sugars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugars_per_cup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugars_per_cup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fat_per_cup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fat_per_cup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                       &lt;span class=&quot;n&quot;&gt;WHERE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugars_per_cup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;median&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/fill_between.png&quot; alt=&quot;Fill between lines&quot; width=&quot;600&quot; /&gt;
&lt;p&gt;&lt;em&gt; Background shading can also be accomplished by filling between two lines.&lt;/em&gt;&lt;/p&gt;
&lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;mostly about telling story quicker - highlight annotate, layering.  and removing extraneous bits spines, ticks etc.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/kimfetti/Blog/blob/master/planetary_birthday_problem.ipynb&quot;&gt;Check out this code on GitHub!&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;bit.ly/odscNyc19_dataviz&quot;&gt;Check out my ODSC conference materials with Google Colab!&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>

			
				<category term="visualizations" />
			
			

			<published>2019-08-05T00:00:00-04:00</published>
		</entry>
	
		<entry>
			<id>http://localhost:4000//mathematics/visualizations/planetary-birthday-problem/</id>
			<title>Solving the Birthday Problem on Mars</title>
			<link href="http://localhost:4000//mathematics/visualizations/planetary-birthday-problem/" rel="alternate" type="text/html" title="Solving the Birthday Problem on Mars" />
			<updated>2018-12-10T00:00:00-05:00</updated>

			
				
				<author>
					
						<name>KFessel</name>
					
					
					
				</author>
			
			<summary>&lt;em&gt;The birthday problem is a classic probability question with a surprising result.  In this post, we will solve this puzzler and extend the result by considering the answer for every planet in our solar system.&lt;/em&gt;</summary>
			<content type="html" xml:base="http://localhost:4000//mathematics/visualizations/planetary-birthday-problem/">&lt;!--more--&gt;

&lt;p&gt;I was recently asked to develop a challenge problem for the &lt;a href=&quot;https://www.thisismetis.com&quot;&gt;Metis&lt;/a&gt; data science bootcamp.  Perhaps it was my background in math or maybe my penchant for mild torture, but I decided to have students answer a few exercises from &lt;a href=&quot;https://www.amazon.com/Challenging-Problems-Probability-Solutions-Mathematics-ebook/dp/B00A3M0VV8&quot;&gt;Fifty Challenging Problems with Solutions&lt;/a&gt; by Mosteller.  This book is full of classic problems in probability, and I highly recommend it to anyone prepping for data science interviews!&lt;/p&gt;

&lt;p&gt;One of my favorite sections in this book is the birthday series, which includes a version of the birthday problem.  This problem is about as famous as a probability question can get.  It has been featured on &lt;a href=&quot;https://www.npr.org/templates/story/story.php?storyId=4542341&quot;&gt;NPR&lt;/a&gt;, written about in an &lt;a href=&quot;https://en.wikipedia.org/wiki/A_Fall_of_Moondust&quot;&gt;Arthur C. Clarke novel&lt;/a&gt;, and it even has its &lt;a href=&quot;https://en.wikipedia.org/wiki/Birthday_problem&quot;&gt;own Wikipedia page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem goes something along the lines of:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;span class=&quot;teaser&quot;&gt;You are throwing a party and inviting random people you have never met. What‚Äôs the fewest number of &lt;br /&gt; people you need to invite to have at least 50% probability that two strangers will have the same birthday? &lt;br /&gt;(Birth year need not match.)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you haven‚Äôt solved this one before, feel free to take a moment and give it a shot.  Be warned ‚Äì &lt;strong&gt;spoilers ahead&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;solving-with-probability&quot;&gt;Solving with Probability&lt;/h2&gt;

&lt;p&gt;Rather than the brute force approach, it turns out that the answer can be found much more easily by considering the complementary case; that is, ‚ÄúHow many people can you invite to expect a 50% chance that all invited people have &lt;em&gt;unique&lt;/em&gt; birthdays?‚Äù  This ‚Äúunsuccessful‚Äù probability along with the ‚Äúsuccessful‚Äù probability will sum to one.&lt;/p&gt;

&lt;p&gt;Keeping the complementary case in mind, note that the first person at your party can have their birthday on any calendar day, but after that, each person must have a different day.  Let \(p_u\) be the probability that \(r\) people each have unique birthdays. We find
\[p_u = 1 \cdot \frac{N-1}{N} \cdot \frac{N-2}{N} \cdots \frac{N-r+1}{N} = \frac{N!}{(N-r)!N^r}\]
where \(N\) is the number of days in one year.&lt;/p&gt;

&lt;p&gt;Backtracking to the original birthday problem, we now just need to find the minimum value of \(r\) people that satisfy:
\[p_{s} = 1 - \frac{N!}{(N-r)!N^r} &amp;gt; \frac{1}{2}.\]&lt;/p&gt;

&lt;p&gt;This expression doesn‚Äôt look all that pleasant to be solved outright, so instead we can build a little solver in Python--or the language of your choice!--to be able to compute \(p_s\) for any given \(r\) and \(N\).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def prob_birthday_success(r, N=365):
    if r &amp;gt; N: 
        return 1.
    factorial = reduce(lambda x, y: x*y, range(N-r+1, N+1))
    power = N**r
    return (1 - factorial/power)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We steadily increase \(r\) and once we hit the \(p_s \geq \frac{1}{2}\) mark, we have our desired party size.  The table below illustrates solutions for 50% probability as well as a few others values of \(p_s\).&lt;/p&gt;

&lt;center&gt;
&lt;table width=&quot;400&quot;&gt;
  &lt;caption&gt;Party size required for several success probabilities&lt;/caption&gt;
  &lt;colgroup&gt;
    &lt;col span=&quot;1&quot; style=&quot;width: 50%;&quot; /&gt;
    &lt;col span=&quot;1&quot; style=&quot;width: 50%;&quot; /&gt;
  &lt;/colgroup&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Probability&lt;/th&gt;
      &lt;th&gt;People Required&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0.05&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.1&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.25&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.75&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;41&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0.999&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
&lt;/table&gt;
&lt;/center&gt;

&lt;p&gt;Notice that if we invite just 23 people to our party, we will have a 50-50 chance in finding a shared birthday.  Inviting 60 or 70 people pretty much guarantees it.  Incredible!&lt;/p&gt;

&lt;p&gt;So it‚Äôs plain to see that \(p_s\) increases rapidly as our party gets bigger here on Earth, but this led me to consider: ‚ÄúWhat would happen if the party took place on, say, Mars or Jupiter?‚Äù  Or in less whimsical terms: ‚ÄúHow many people would we need if we varied the year length, \(N\)?‚Äù&lt;/p&gt;

&lt;h2 id=&quot;planetary-results&quot;&gt;Planetary Results&lt;/h2&gt;

&lt;p&gt;The first step in solving the birthday problem for the rest of our solar system is gathering &lt;a href=&quot;https://www.universetoday.com/37507/years-of-the-planets/&quot;&gt;year lengths for each planet&lt;/a&gt;, which vary wildly: from a meager 88 days on Mercury up to a whopping 60,182 days on Neptune.  In fact, your entire life will be confined to a single orbital period of Neptune.  There goes that Neptunian birthday party you‚Äôve always wanted!  (Admittedly, the definition of a ‚Äúbirthday‚Äù gets a little murky on these other planets‚Ä¶  but more on this later.)&lt;/p&gt;

&lt;p&gt;Once year lengths have been gathered, working out the problem for different values of \(N\) is as simple as returning to the Python function introduced earlier.  The required number of party goers to achieve a 50% probability of birthday matching on each planet can be found below.  As a child of the 80s, I must tell you it is &lt;em&gt;VERY&lt;/em&gt; difficult for me to not include Pluto on this chart.  But there‚Äôs always hope for a &lt;a href=&quot;https://www.space.com/40550-pluto-planet-debate-flares-up-again.html&quot;&gt;Plutonian comeback&lt;/a&gt;! üôè&lt;/p&gt;

&lt;center&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; align=&quot;center&quot; width=&quot;1050&quot; height=&quot;500&quot; src=&quot;https://public.tableau.com/views/PlanetaryBirthdayProblem/Planets-50?:showVizHome=no&amp;amp;:embed=true&quot;&gt; &lt;/iframe&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Even on Neptune where there are over 60,000 Earth days per year, we only require 290 people to have a 50% chance of matching birthdays.  That‚Äôs an amazingly small amount for such a massive number of days in each year!&lt;/p&gt;

&lt;p&gt;So now back to our broader question: ‚ÄúWhat‚Äôs the overall trend as \(N\) increases?‚Äù  Well, the chart above is great for being able to read information associated with every planet, but it‚Äôs a bit misleading trendwise because both axes are on a log scale.  Let‚Äôs take a look at this same information without the axial scaling.&lt;/p&gt;

&lt;center&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; align=&quot;center&quot; width=&quot;700&quot; height=&quot;400&quot; src=&quot;https://public.tableau.com/views/PlanetaryBirthdayProblem/Planets-50-Trueaxes?:showVizHome=no&amp;amp;:embed=true&quot;&gt; &lt;/iframe&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Ah ha!  Viewing the data this way, a trend that looks roughly like a power relationship emerges.  We will now take a closer look at the analytic expression for \(p_s\) to dive deeper into this relation.&lt;/p&gt;

&lt;h2 id=&quot;expanding-solution-with-approximations&quot;&gt;Expanding Solution with Approximations&lt;/h2&gt;

&lt;p&gt;We are about to embark upon the amazing world of expansions and approximations--AKA put your math pants on and fasten your seat belts!  (If this sort of nerdout isn‚Äôt your thing, no worries.  Just skip ahead to the end of this section where all will revealed‚Ä¶ üîÆ  Much of this work can also be found in &lt;a href=&quot;https://www.amazon.com/Challenging-Problems-Probability-Solutions-Mathematics-ebook/dp/B00A3M0VV8&quot;&gt;Mosteller&lt;/a&gt; as his solution to the birthday problem.)&lt;/p&gt;

&lt;p&gt;First recall that 
\[e^{-x} = 1 - x + \frac{x^2}{2!} - \frac{x^3}{3!}+ \cdots,\]
so ultimately, \(e^{-x} \approx 1 - x\) for very small values of \(x\).&lt;/p&gt;

&lt;p&gt;Now represent \(p_u\)--that‚Äôs the unsuccessful probability--as
\[p_u = \frac{N(N-1)(N-2)\cdots(N-r+1)}{N^r} = \frac{N^r - \hat{k}}{N^r} = 1 - \frac{k}{N}\]
where \(k\) contains multiple factors but all are smaller than \(N\).&lt;/p&gt;

&lt;p&gt;Combining these two expressions, we then find that
\[p_u = 1 - \frac{k}{N} \approx e^{-k/N},\]
which is valid because \(k/N\) is typically much smaller than one.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs further consider the values contained within \(k\).  Expanding out the numerator in \(p_u\), we have
\[p_u=\frac{N(N-1)\cdots(N-r+1)}{N^r} = \frac{N^r - N^{r-1}\left[0+1+2+\cdots(r-1)\right] + \cdots}{N^r} = 1 - \frac{0 + 1 + 2 + \cdots (r-1)}{N} + \cdots.\]
The quantity \(k\) represents several terms, but to leading order, it just looks a sum of the integers between 0 and \(r-1\).  More specificially,
\[k \approx 0 + 1 + 2 + \cdots + r-1 = \sum_{i=0}^{r-1}j = \frac{r(r-1)}{2}.\]
So where does this lead us?  Returning to our exponential expression above, we have
\[p_u \approx e^{-k/N} \approx e^{-r(r-1)/2N},\]
which looks &lt;em&gt;much&lt;/em&gt; more tractable than the original expression we had for \(p_u\) containing those factorials.  We can even come up with an expression to relate \(r\) to \(N\) more explicitly in the leading order.&lt;/p&gt;

&lt;p&gt;Subbing in \(p_u = 1 - p_s\) and taking the natural log of each side, we eventually find
\[\frac{r(r-1)}{2N} \approx -\ln{(1 - p_s)},\]
which means
\[r(r-1) \approx -2N\ln{(1-p_s)}.\]
So there you have it!  Selecting in any given value for \(p_s\) will fix the log factor and the other two quantities are related as
\[\mathcal{O}\left(r\right) \sim \mathcal{O}\left(\sqrt{N}\right).\]
The trend we saw in the planet chart was indeed a power relationship; specifically, \(r\) goes like \(\sqrt{N}\) as \(N\) increases for the birthday problem.  This means that even on planets with many, many days in a year, we don‚Äôt really need to increase our party size by all that much to ensure our 50-50 chance of finding birthday twins.&lt;/p&gt;

&lt;h2 id=&quot;approximation-in-action&quot;&gt;Approximation in Action&lt;/h2&gt;
&lt;p&gt;How good is this approximation in practice?  Well, the trendline we saw earlier in the true-scale axes chart was auto-fitted in Tableau with a power trend, and indeed, the equation for the resulting line was found to be&lt;/p&gt;

&lt;p&gt;\[r = 1.28548 \cdot N^{0.491503}\]&lt;/p&gt;

&lt;p&gt;So our square-root relationship appears to hold true.&lt;/p&gt;

&lt;p&gt;We can also more explicitly consider what happens as \(N\) gets larger. Because we are estimating
\[1-\frac{k}{N} \approx e^{-k/N},\]
this approximation should actually become &lt;em&gt;more&lt;/em&gt; valid as \(N\) becomes larger since \(k/N\) will resultingly grow smaller.&lt;/p&gt;

&lt;p&gt;Now set \(p_s = \frac{1}{2}\) and let \(r_{1/2}\) be the 50-50 chance party size. Plotting the left-hand side of our approximation
\[\frac{r_{1/2}(r_{1/2}-1)}{2N} \approx \ln{2}\]
for various evenly sampled values of \(N\), we see in the figure below that this estimation indeed becomes more valid and encounters less variance about \(\ln{(2)}\) as \(N \to \infty\).  (There is an added layer of complexity in this problem, however, because we require \(r_{1/2}\) to be an integer; this stipulation makes our approximation dance about the line a bit even at large values of \(N\).)&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://kimfetti.github.io/images/planetary-birthday-approx.png&quot; alt=&quot;Approximation plot&quot; width=&quot;900&quot; height=&quot;400&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The birthday problem is a classic that has been examined from several different angles.  I hope you‚Äôve enjoyed this planetary rendition and the subsequent deep dive into analytic approximations to explore how \(r\) is related to year length.&lt;/p&gt;

&lt;p&gt;A few final thoughts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;It is well-known that birthdays are &lt;a href=&quot;http://www.panix.com/~murphy/bday.html&quot;&gt;not equally distributed throughout all 365 days&lt;/a&gt;, especially if you focus on one region of the world.  So how does non-uniformity affect our birthday solution?&lt;/p&gt;

    &lt;p&gt;It turns out that the uniform distribution of birthdays we used throughout this post is actually a &lt;a href=&quot;https://www.jstor.org/stable/2318556?seq=1#page_scan_tab_contents&quot;&gt;worst-case scenario&lt;/a&gt; in terms of successfully finding birthmates.  If birthdays are skewed toward one day or another, the odds that you will find birthday twins at your party actually increase‚Ä¶ but not significantly.  Attempts at calculating the birthday problem with real-world datasets have shown the 23-person group to be a pretty consistent solution, even when considering &lt;a href=&quot;https://www.stat.wisc.edu/techreports/tr591.pdf&quot;&gt;non-uniform distributions&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I eluded to this earlier, but the idea of a ‚Äúbirthday‚Äù gets a bit complicated when thinking about other planets.  I often mentioned my findings in terms of ‚ÄúEarth days‚Äù because I calculated each planet‚Äôs revolution about the Sun in the number of times it takes Earth to rotate about its own axis.  What does that mean in the context of this problem?&lt;/p&gt;

    &lt;p&gt;Consider two cases: Jupiter and Mercury.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Firstly, Jupiter rotates about its own axis in about &lt;a href=&quot;https://www.universetoday.com/37507/years-of-the-planets/&quot;&gt;9 hours and 55 minutes&lt;/a&gt;, faster than any other planet in our solar system.  So while Jupiter takes roughly 4,333 Earth days to complete its orbit about the Sun, this actually amounts to 10,476 &lt;em&gt;Jovian&lt;/em&gt; days.  That‚Äôs a lot more potential ‚Äúbirthdays!‚Äù&lt;/li&gt;
      &lt;li&gt;Mercury, on the other hand, completes a rotation about its axis &lt;em&gt;slower&lt;/em&gt; than any other planet. It takes about 176 Earth days for Mercury to rotate, which is &lt;em&gt;longer&lt;/em&gt; than Mercury‚Äôs revolution about the Sun.  Ultimately, a ‚Äúyear‚Äù on Mercury is half as long as a ‚Äúday.‚Äù  The birthday problem is completely moot because everyone born in the same Mercurian year is automatically born on the same Mercurian day! (‚Ä¶ Please ignore the fact that no one is ever actually born on Mercury. üòÜ)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;br /&gt;
 I have chosen to disregard this planetary difference in the definition of a ‚Äúday‚Äù for simplicity, but keeping with the same Python function introduced near the beginning of this post, we could relatively easily compute revised birthday solutions.  Please let me know if you work this out!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/kimfetti/Blog/blob/master/planetary_birthday_problem.ipynb&quot;&gt;Check out this code on GitHub!&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;¬†&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://public.tableau.com/profile/kimberly.fessel#!/vizhome/PlanetaryBirthdayProblem/Planets-50&quot;&gt;Check out this viz on Tableau!&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>

			
				<category term="mathematics" />
			
				<category term="visualizations" />
			
			

			<published>2018-12-10T00:00:00-05:00</published>
		</entry>
	
</feed>